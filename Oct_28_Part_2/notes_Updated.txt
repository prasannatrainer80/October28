Algorithms and Datastructures :

Algorithm 

Finite set of instructions which are being carried in specific order to perform specific task.

Algorithm s not a code or program, it just a solution (logic) which is specified in simple English. 

Algorithm will be same for any programming language, 

as the programmer needs to convert algorithm into a program code. 

Characterstics : 
________________

Input : An algorithm has some input vaues, we can pass 0 or some input values 
	as for prog, which are inputs are reqd that comes here. 

Output : What is the outcome we are getting after process. 

Finiteness : Algorithm should have finiteness. Here, finiteness means that within no.of steps we can complete the task or program, as we can trust. 

Effectiveness : An algorithm should be effective as each instruction in an algorithm affects the overall process. 

Language Independent : Algorithm will be same for any programming language, as it is step by step instructions as they are converted into programming language. 

Algorithm for sum of 2 nos : 
___________________________

Step 1 : Start

Step 2 : Declare firstNo, secondNo, result as number varibles

Step 3 : Accept firstNo, SecondNo 

Step 4 : Compute result as FirstNo + SecondNo

Step 5 : Print result

Step 6 : End 

For Problem Solving, we have various approaches as 

1) Brute Force Approach : This kind of problem solving approach ensures to list out all
possibilities of the given problem solution, 

	Optimizing : From the list of given solutions, we need to pick one efficient solution (optionize) and apply for the given scenario.

-> Write a Program/pseudo code that accept a number and 
check if its positive return 1 if its negative return -1.

int check(int x) {
   if (x >= 0)
   {
	return 1;
   }
   if (x < 0) 
   {
       return -1;
   }
}

_______________________________________________________


int check(int x) {
    if (x >=0 )
    {
 	return 1;
    }
    return -1;
}

	Heuristic

	
When to stop is as soon as you are satisfied with the given solution, and picked for efficient then we can stop for other solutions. 

Heuristic approach as rule of thumb that helps you to decide which possibilities
we should look at first.

Pros : 
_______

	-> Shows all possibilities of given solution

	-> This type of algorithm is applicable for any domain

	-> It is mainly used for solving small problems.

 

2) Greedy Approach : Decides what to do in each step, only based on current step, we need to see any alternative action to be perfomed. 

	It makes locally optimal code choice in each step, hoping to find the global optimum solution in the end. 

Major principles we use in implementation of greedy approach is 
	
(i) Greedy choice property means that the problem is so that the 
solution can be reached by making greedy choices in each steps

(ii) Optimal Substructure : Means that the optiomal solution to a problem,
is a collection of subprograms to be grouped to solve a problem.

Divide and Conquer : 

It is famous algorithm pattern, the design is to take a dispute on huge input. 

As the problem seems to be big and not to be solved, break the program
into minor pieces, decie the problem on each and small peiece and then
merge the solutions into a global solution. 


Divide : The original problem into a set of subproblems

Conquer : Solve every subproblem individually, recursively

Combine : Put together the solutions of the subproblems to get the solution to 
whole problem.

Data Structures : 
____________________

Provides best solution to store and retrieve data, perform add/remove or update
operations to be given in data. 

The main data structures comes here are 

1) Arrays

2) Linked List

3) Stack and Queue

4) Trees

5) Graphs 

An array is the finite ordered set of homogenous elements, means all the elements belongs to same data type. 

The group of related data type elements are to be stored known as array, all the elements of array are stored in successive memory locations. 

int a[30];

JavaFoundation students[50];

BTechCs3 stud[30];


Assume, we have array a as {1,2,3,4,5,6}

a[0]=1
a[1]=2
a[2]=3
a[3]=4
a[4]=5
a[5]=6

The major drawback with arrays are, arrays are static data structures, as once they are assigned we cannot alter the size.  As dynamic memory allocation not possible as 

And one more drawback in arrays is if you add or delete any elements all successive elements position to be altered

Example :

above list if i delete element 3 then 

a[0]=1
a[1]=2
a[2]=4
a[3]=5
a[4]=6

3) Divide and Conquer

4) Dynamic Programming

Searching Techniques  
______________________

1) Linear Search

It is a sequential search mechanism ensures, 

first 0th index to last element we need to search the element, if element found then stop searching

Efficiency is 

Best Case 1 time O(1)

Worst case nth time O(n) as if i need to search in one lakh records then it takes 1 lakh times

so this algorithm is insufficient.

STACK : 


We discussed w.r.t. 

Bubble
Selection
Insertion

Quicksort : This approach allows you to sort list which is having large 
no.of elements 

Quick Sort Purely works on basis of divide and conquer

_________________________________________________________________________


How Quicksort algorithm works 

Identify one element as pivot 

as mostly first element or middle element. 

in ----------------> find out first greatest element than pivot

<------------------- find out first smallest element than pivot

now please swap it

if both are in correct order, then break the list in to sublist and apply the 
same rule. 

___________________________________________________________________________________________________


35 90 12 29 87 75 6 36 34 91 11 3 44 52 88 92 21 82

Take first element as pivot 

35 

-------------------------------------> find out first element which is greater than pivot (35) 

90

<----------------------------------- Rev direction find out which element is less than pivot (35) 

21

both to be swapped

35 21 12 29 87 75 6 36 34 91 11 3 44 52 88 92 90 82

-------------------------------------> find out first element which is greater than pivot (35) 

87

<----------------------------------- Rev direction find out which element is less than pivot (35) 

3

Both to be swapped

35 21 12 29 3 75 6 36 34 91 11 87 44 52 88 92 90 82

-------------------------------------> find out first element which is greater than pivot (35) 

75

<----------------------------------- Rev direction find out which element is less than pivot (35) 

11

Both to be swapped

35 21 12 29 3 11 6 36 34 91 75 87 44 52 88 92 90 82

-------------------------------------> find out first element which is greater than pivot (35) 

36

<----------------------------------- Rev direction find out which element is less than pivot (35) 

34

Both to be swapped

35 21 12 29 3 11 6 34 36 91 75 87 44 52 88 92 90 82


-------------------------------------> find out first element which is greater than pivot (35) 

36

<----------------------------------- Rev direction find out which element is less than pivot (35) 

34

No Swap as both in correct Order

35 21 12 29 3 11 6 34  -> List 1

36 91 75 87 44 52 88 92 90 82 -> List 2

35 21 12 29 3 11 6 34

35 as pivot 


-------------------------------------> find out first element which is greater than pivot (35) 

No greatest elemenet as pivot is greatest (35)

<----------------------------------- Rev direction find out which element is less than pivot (35) 
 
34

Swap needed

34 21 12 29 3 11 6 35

34 is pivot 

put 35 to separate list   ***************** Result to be combined 35 ****

34 21 12 29 3 11 6 

34 21 12 29 3 11 6

34 is pivot 

-----------------------------> Find out first greatest element than pivot 

no greter element as pivot is greatest 34

<---------------------- Find out first smallest element than pivot

6

swap them

6 21 12 29 3 11 34

34 *************************** Result to be combined **********************


6 21 12 29 3 11 

6 is pivot 

-----------------------> Find out first greater element than pivot 

21

<---------------------- Find out which is first smallest elemnt than pivot 

3

Swap needed

 
6 3 12 29 21 11 

6

-----------------------> Find out first greater element than pivot 
12

<----------------------- Find out which is smallest element than pivot

3

NO swap as break list

6 3 

3 6 *********** Result to be concatednated ***

12 29 21 11 

12 is pivot

------------------------> Find out first element which is greater than pivot 

29

<------------------------ Find out first element which is less than pivot 

11

swap needed

12 11 21 29

------------------------> Find out first element which is greater than pivot 
21

<---------------------- Find out small element which is less than pivot

11

no swap break it

12 11

21 29

11 12 21 29 

Combine All result

3 6 11 12 21 29 34 35 36 ############################################ List 1 sorted #################

___________________________________________________________________________________

91 75 87 44 52 88 92 90 82

91 as pivot 

----------------------------------------------------> Find out first greaest element than pivot 

92

<-------------------------------------------------- Find out first smallest element than pivot

82

swap

91 75 87 44 52 88 82 90 92

----------------------------------------------------> Find out first greaest element than pivot 

No swap as both are in correct order

break

91, 92 -> Final result *************************************************

75 87 44 52 88 82 90

75 pivot 

------------------------------------------------------------------> Find out first greatest element 

87

<---------------------------------------------------------- Find out first element which is less than pivot

52

Swap

75 52 44 87 88 82 90

------------------------------------------------------------------> Find out first greatest element 

87

<------------------------------------------------------- Find out first smallest element. 

44

no swap break it

75 52 44

87 88 82 90

44 52 75 82 87 88 90 91 92 -------------------------- List 2

Combined List1 and LIst 2

3 6 11 12 21 29 34 35 36 44 52 75 82 87 88 90 91 92

________________________________________________________________________________________________________

29 11 88 77 33 7 91 44 66 55 

29 is pivot

-------------------------------------------> Find out first greatest element than pivot

88

<------------------------------------------ Find out first smallest element than pivot

7

Swap

29 11 7 77 33 88 91 44 66 55 


-------------------------------------------> Find out first greatest element than pivot

77

<------------------------------------------- Find out first smallest element than pivot (29)

7

Both are in correct Order, no swap break it


29 11 7 -> List 1

77 33 88 91 44 66 55 -> List 2

List 1 after 1 iteration 7 11 29 ->>>>>>>>>>>>>>>>>>>> Sorted >>>>>>>>>>>>>>>>>>>

List 2

77 33 88 91 44 66 55 -> List 2

77 is pivot 

-------------------------------------------------------> Find out first greatest element than pivot

88

<--------------------------------------------- Find out first smallest element than pivot

55

Swap


77 33 55 91 44 66 88

-------------------------------------------------------> Find out first greatest element than pivot
91

<------------------------------------------------------- Find out first smallest element than pivot

66

Swap

77 33 55 66 44 91 88

------------------------------------------------------> Find out first greatest element than pivot

91

<----------------------------------------------------- Find out first smallest than pivot

44

no swap break it

77 33 55 66 44 

91 88

88 91

77 33 55 66 44 

44 33 55 66 77

34 44 55 66 77 88 91 >>>>>>>>>>>>>>>>>>>>>>>>>>>>> Output 2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Combining

7 11 29 34 44 55 66 77 88 91

_____________________________________________________________________________

Lets take the below list and we need to form a binary tree for that 

35 90 12 29 87 75 6 36 34 91 11 3 44 52 88 92 21 82

Take first element as root node

the elements which are less than root node needs to be in left sub tree

the elements which are greater than root node needs to bein right sub tree

______________________________________________________________________

42 11 90 41 45 98 77 6 19 66 33 22 78 99 88 71 61 59 39 21

____________________________________________________________________________

In Order Traversal 

-> Traverse the Left Subtree
-> Visit the Root Node
-> Traverse the Right Subtree

_____________________________________________________________________________

PreOrder Traversal

-> Visit the Root Node
-> Traverse the Left Subtree
-> Traverse the right subtree

______________________________________________________________________________

PostOrder Traversal

-> Traverse the Left Subtree
-> Traverse the Right Subtree
-> Visit the Root Node

_____________________________________________________________________


35 10 56 7 44 11 22 88 66 6 90 34 5


In Order Left, Root, Right

Pre Order Root, Left, Right

Post Order Left, Right, Root

















