Object Oriented Programming : 
______________________________

It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics known as 

	(i) State

	(ii) Behaviour

	(iii) Identity 

OOPS features : 
________________

(i) Encapsulation : Wrapping up of data and functions into a single unit known as encapsulation. 

(ii) Abstraction : Hiding the irrelevant details of an object that do not contribute to its essential characterstics known as abstraction. 

*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

(iii) Inheritance : Deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce the size of the program.

(iv) Polymorphism : The ability to take more than one form known as polymorphism. 

class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name
{
   data members;
   member functions;
}

Why Java : 
___________

1) Platform Independence : Write Once and Run anywhere

2) Console/Windows/Web/Mobile Apps/Service Oriented 

3) Package : Contains group of related classes and interfaces that which belongs to one common group, if you want to overcome the naming conflicts between classes, then we need the help of packages.

Java Features : 
________________

1) Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal details like memory management etc... how much memory allocated to run the program the same amount of memory will be reallocated automatically. 

2) Object Oriented : Java supports all object oriented programming features. 

3) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created.  In interpretation it reads the bytecode line by line and executes. 

4) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any env. without changing the source code. 

5) Distributed : By using java we can implement all distributed and robust applications. 

6) Securable : Java implements various levels of security as 

	(i) Compiler Level Security

	(ii) Bytecode Level

	(iii) Class Loader Level 


Java Architecture : 
____________________


	1) Java Program : Java code, that which stores with extension .java 

	2) Java Class  : Java code after compilation, its converted into bytecode, then .class file will 
				be created. 

	3) JVM (Java Virtual Machine) 

		It contains major units as

			(i) Class Loader : Used to load all the classes that which are required to run the 				program.  There are 2 types of class loaders known as 

				(a) Primordial Class Loader 

			Used to load all system classes which are required to run the program 

				(b) Class Loader Objects  

			Used to load all custom classes which are required to run the program. 

			(ii) JIT Compiler : Used to convert bytecode into CPU understandable format. 

			(iii) Execution Manager : Contains QUEUE of programs which are ready to run, where we can execute the program. Before execution it needs to undergone the security authentication. 

	4) Java API : It provides runtime env, that which allows you to run the java program.

			It contains 2 major units as 

				JDK 

				JRE 
		

Access Modifiers : 
___________________


(i) private  : Allows you to access members within current class. 

(ii) public  : Allows you to access members in entire application.

(iii) protected : Allows you to access members within current/derived class. 

(iv) friendly : Allows you to access members within all classes of current package. 

Data Types : 
____________

There are 2 types of data types as 

(i) value types : int, float, double, char, Boolean 

(ii) reference types : String, Object and user-defined data types


Value types will be stored in STACK memory, and reference types will be stored in HEAP memory. 

System.out.println() : Used to display any value or message. 

System -> class
out -> Console
println() -> Method. 

System.out.println("Welcome to Java Programming...");

int x=12;
double y=12.5;
String str="Hello";

System.out.println("X  " +x+ " Y " +y+ " Str " +str);

in java console applications, you can define method main() as 

public static void main(String[] args) {
...
...
...
}
























